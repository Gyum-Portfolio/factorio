 [{
        "index": 1,
        "before": "/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\n\npackage org.opensearch.telemetry.tracing;\n\nimport java.io.Closeable;\nimport java.io.IOException;\n\n/**\n *\n * The default tracer implementation. It handles tracing context propagation between spans by maintaining\n * current active span in its storage\n *\n *  @opensearch.internal\n */\nclass DefaultTracer implements Tracer {\n    static final String THREAD_NAME = \"th_name\";\n\n    private final TracingTelemetry tracingTelemetry;\n    private final TracerContextStorage<String, Span> tracerContextStorage;\n\n    /**\n     * Creates DefaultTracer instance\n     *\n     * @param tracingTelemetry tracing telemetry instance\n     * @param tracerContextStorage storage used for storing current span context\n     */\n    public DefaultTracer(TracingTelemetry tracingTelemetry, TracerContextStorage<String, Span> tracerContextStorage) {\n        this.tracingTelemetry = tracingTelemetry;\n        this.tracerContextStorage = tracerContextStorage;\n    }\n\n    @Override\n    public SpanScope startSpan(String spanName) {\n        return startSpan(spanName, null);\n    }\n\n    @Override\n    public SpanScope startSpan(String spanName, SpanContext parentSpan) {\n        Span span = null;\n        if (parentSpan != null) {\n            span = createSpan(spanName, parentSpan.getSpan());\n        } else {\n            span = createSpan(spanName, getCurrentSpanInternal());\n        }\n        setCurrentSpanInContext(span);\n        addDefaultAttributes(span);\n        return new DefaultSpanScope(span, (scopeSpan) -> endSpan(scopeSpan));\n    }\n\n    @Override\n    public void close() throws IOException {\n        ((Closeable) tracingTelemetry).close();\n    }\n\n    private Span getCurrentSpanInternal() {\n        return tracerContextStorage.get(TracerContextStorage.CURRENT_SPAN);\n    }\n\n    public SpanContext getCurrentSpan() {\n        final Span currentSpan = tracerContextStorage.get(TracerContextStorage.CURRENT_SPAN);\n        return (currentSpan == null) ? null : new SpanContext(currentSpan);\n    }\n\n    private void endSpan(Span span) {\n        if (span != null) {\n            span.endSpan();\n            setCurrentSpanInContext(span.getParentSpan());\n        }\n    }\n\n    private Span createSpan(String spanName, Span parentSpan) {\n        return tracingTelemetry.createSpan(spanName, parentSpan);\n    }\n\n    private void setCurrentSpanInContext(Span span) {\n        tracerContextStorage.put(TracerContextStorage.CURRENT_SPAN, span);\n    }\n\n    /**\n     * Adds default attributes in the span\n     * @param span the current active span\n     */\n    protected void addDefaultAttributes(Span span) {\n        span.addAttribute(THREAD_NAME, Thread.currentThread().getName());\n    }\n\n}\n",
        "after": "/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\n\npackage org.opensearch.telemetry.tracing;\n\nimport java.io.Closeable;\nimport java.io.IOException;\nimport org.opensearch.telemetry.tracing.attributes.Attributes;\n\n/**\n *\n * The default tracer implementation. It handles tracing context propagation between spans by maintaining\n * current active span in its storage\n *\n *  @opensearch.internal\n */\nclass DefaultTracer implements Tracer {\n    static final String THREAD_NAME = \"th_name\";\n\n    private final TracingTelemetry tracingTelemetry;\n    private final TracerContextStorage<String, Span> tracerContextStorage;\n\n    /**\n     * Creates DefaultTracer instance\n     *\n     * @param tracingTelemetry tracing telemetry instance\n     * @param tracerContextStorage storage used for storing current span context\n     */\n    public DefaultTracer(TracingTelemetry tracingTelemetry, TracerContextStorage<String, Span> tracerContextStorage) {\n        this.tracingTelemetry = tracingTelemetry;\n        this.tracerContextStorage = tracerContextStorage;\n    }\n\n    @Override\n    public SpanScope startSpan(String spanName) {\n        return startSpan(spanName, Attributes.EMPTY);\n    }\n\n    @Override\n    public SpanScope startSpan(String spanName, Attributes attributes) {\n        return startSpan(spanName, null, attributes);\n    }\n\n    @Override\n    public SpanScope startSpan(String spanName, SpanContext parentSpan, Attributes attributes) {\n        Span span = null;\n        if (parentSpan != null) {\n            span = createSpan(spanName, parentSpan.getSpan(), attributes);\n        } else {\n            span = createSpan(spanName, getCurrentSpanInternal(), attributes);\n        }\n        setCurrentSpanInContext(span);\n        addDefaultAttributes(span);\n        return new DefaultSpanScope(span, (scopeSpan) -> endSpan(scopeSpan));\n    }\n\n    @Override\n    public void close() throws IOException {\n        ((Closeable) tracingTelemetry).close();\n    }\n\n    private Span getCurrentSpanInternal() {\n        return tracerContextStorage.get(TracerContextStorage.CURRENT_SPAN);\n    }\n\n    public SpanContext getCurrentSpan() {\n        final Span currentSpan = tracerContextStorage.get(TracerContextStorage.CURRENT_SPAN);\n        return (currentSpan == null) ? null : new SpanContext(currentSpan);\n    }\n\n    private void endSpan(Span span) {\n        if (span != null) {\n            span.endSpan();\n            setCurrentSpanInContext(span.getParentSpan());\n        }\n    }\n\n    private Span createSpan(String spanName, Span parentSpan, Attributes attributes) {\n        return tracingTelemetry.createSpan(spanName, parentSpan, attributes);\n    }\n\n    private void setCurrentSpanInContext(Span span) {\n        tracerContextStorage.put(TracerContextStorage.CURRENT_SPAN, span);\n    }\n\n    /**\n     * Adds default attributes in the span\n     * @param span the current active span\n     */\n    protected void addDefaultAttributes(Span span) {\n        span.addAttribute(THREAD_NAME, Thread.currentThread().getName());\n    }\n\n}\n"
    }]